name: sta
# either manually started, or on a schedule
on: [ push, workflow_dispatch, pull_request ]
jobs:
  sta:
    env:
        OPENLANE_TAG:           2023.02.14
        OPENLANE_IMAGE_NAME:    efabless/openlane:2023.05.19
        OPENLANE_ROOT:          /home/runner/openlane
        PDK_ROOT:               /home/runner/pdk
        PDK:                    sky130A
    # ubuntu
    runs-on: ubuntu-latest
    steps:
    # need the repo checked out
    - name: checkout repo
      uses: actions/checkout@v3

    # install the tt tools
    - name: checkout tt tools repo
      uses: actions/checkout@v3
      with:
        repository: tinytapeout/tt-support-tools
        ref: tt03p5
        path: tt

    # install the tt mux
    - name: checkout tt mux repo
      uses: actions/checkout@v3
      with:
        repository: tinytapeout/tt-multiplexer
        path: tt-multiplexer
        ref: tt03p5

    # build pdk - have to move this back above to get caravel makefile
    - name: pdk & openlane
      run: make setup

    # uncompress any gds commited to the repo
    - name: uncompress gds
      run: | 
        make uncompress

    # need python
    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    - run:  |
        pip install verilog-parser
        pip install -r tt/requirements.txt -r tt-multiplexer/proto/requirements.txt

    # fetch the repos,
    - name: Fetch user project, update caravel configuration
      run: python ./tt/configure.py --test --clone-all --fetch-gds --update-caravel
      env:
        GH_TOKEN:       ${{ secrets.GH_TOKEN }}
        GH_USERNAME:    ${{ secrets.GH_USERNAME }}

    # generate the tt mux verilog that instantiates all the modules - use the test version
    - name: module config
      run: |
        cp tt_test_module.yaml tt_user_module.yaml
        make gen-user-module

    # macro config, depends on the ttmux build artifacts being present
    - name: macro config
      run: python gen_macro_cfg.py

    # user project wrapper
    - name: user project wrapper GDS
      run: make user_project_wrapper

    # setup sta script
    - name: setup sta
      run: python ./sta_top/toplevel_sta.py ./verilog/gl/user_project_wrapper.v ./spef/user_project_wrapper.spef sta_top/top.sdc

    # run sta, create sta.log
    - name: run sta
      run: ./stadocker.sh

    # test
    - name: test sta
      if: success() || failure()
      run: |
        ! grep VIOLATED sta.log

    - name: upload logs
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: STA
        path: sta.log
